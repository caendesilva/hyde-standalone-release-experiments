#!/usr/bin/env php
<?php

/**
 * This is the main entry point for the global Hyde binary,
 * and is what runs when you run `hyde` from the command line.
 *
 * The binary can be used in two ways:
 * - Anonymous mode: Uses the built-in scaffolding to allow Hyde to be used
 *                   without installation in a directory with just source files.
 * - Proxy mode: Defers to the Hyde installation in the current directory.
 */

// Define working directory
define('HYDE_WORKING_DIR', getcwd());

// Determine the mode to run in

return match ((function () {
    // If the current directory contains a Hyde binary (that is not this file), run in proxy mode
    if (file_exists(HYDE_WORKING_DIR . '/hyde') && realpath(HYDE_WORKING_DIR . '/hyde') !== realpath(__FILE__)) {
        return 'proxy';
    }

    // Otherwise, run in anonymous mode
    return 'anonymous';
})()) {
    'proxy' => require_once HYDE_WORKING_DIR . '/hyde',
    'anonymous' => (function() {
        // Bootstrap the Phar application

        // As the Phar archive is readonly, we define a temporary directory
        // that Laravel can use to store the compiled views, cache files,
        // and config files, all to allow the binary to run anywhere,
        define('HYDE_TEMP_DIR', sprintf('%s/hyde/%s',
            // Todo: Include the application version in the hash string
            //       to force regeneration when updating the binary.
            sys_get_temp_dir(), md5(HYDE_WORKING_DIR)
        ));

        // Create and set up the temporary directory if it doesn't exist
        if (! is_dir(HYDE_TEMP_DIR)) {
            mkdir(HYDE_TEMP_DIR . '/config', recursive: true);
            mkdir(HYDE_TEMP_DIR . '/app/storage/framework/cache', recursive: true);
            // Todo: See if we can do without this
            copy(__DIR__ . '/app/config.php', HYDE_TEMP_DIR . '/config/app.php');
        }

        // Register the autoloader
        $autoloader = require_once __DIR__.'/vendor/autoload.php';

        // Create the application
        $app = require_once __DIR__.'/app/bootstrap.php';

        // Run the application
        $kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

        $status = $kernel->handle(
            $input = new Symfony\Component\Console\Input\ArgvInput,
            new Symfony\Component\Console\Output\ConsoleOutput
        );

        // Shutdown the application

        $kernel->terminate($input, $status);
        exit($status);
    })(),
};
